<div class="w-full max-w-md">
  <form id="newsletter-form" class="join w-full" novalidate>
    <input
      type="email"
      id="email-input"
      placeholder="Escribe tu correo"
      class="input join-item flex-1"
      autocomplete="email"
    />
    <button
      type="submit"
      class="btn btn-primary text-base-content join-item"
      id="submit-btn"
    >
      Suscribirse
    </button>
  </form>

  <p id="validation-error" class="text-sm mt-2 pl-1 hidden"></p>
</div>

<script>
  const form = document.getElementById("newsletter-form") as HTMLFormElement;
  const emailInput = document.getElementById("email-input") as HTMLInputElement;
  const validationError = document.getElementById(
    "validation-error"
  ) as HTMLParagraphElement;
  const submitButton = document.getElementById(
    "submit-btn"
  ) as HTMLButtonElement;

  const validateEmail = (email: string): { valid: boolean; error?: string } => {
    if (!email || email.trim() === "") {
      return {
        valid: false,
        error: "Por favor, ingresa tu correo electrónico",
      };
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return {
        valid: false,
        error: "Por favor, ingresa un correo electrónico válido",
      };
    }

    return { valid: true };
  };

  const updateButtonState = () => {
    const email = emailInput.value.trim();
  };

  const showError = (message: string) => {
    validationError.textContent = message;
    validationError.classList.remove("hidden", "text-success");
    validationError.classList.add("text-error");
    emailInput.classList.add("input-error");
  };

  const showSuccess = (message: string) => {
    validationError.textContent = message;
    validationError.classList.remove("hidden", "text-error");
    validationError.classList.add("text-success");
    emailInput.classList.remove("input-error");
  };

  const clearError = () => {
    validationError.classList.add("hidden");
    validationError.classList.remove("text-error", "text-success");
    emailInput.classList.remove("input-error");
  };

  emailInput.addEventListener("input", () => {
    updateButtonState();
    clearError();
  });

  updateButtonState();

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    const email = emailInput.value.trim();

    const validation = validateEmail(email);
    if (!validation.valid) {
      showError(validation.error!);
      return;
    }

    clearError();
    submitButton.innerHTML =
      '<span class="loading loading-spinner loading-sm"></span> Suscribiendo...';

    try {
      const response = await fetch("/api/subscribe", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ email }),
      });

      if (response.ok) {
        showSuccess("✓ ¡Suscrito! Revisa tu email para confirmar.");
        emailInput.value = "";

        setTimeout(() => {
          clearError();
          updateButtonState();
        }, 5000);
      } else {
        let errBody = null;
        try {
          errBody = await response.json();
        } catch (e) {
          errBody = await response.text();
        }

        if (typeof errBody === 'string' && (errBody.includes('already subscribed') || errBody.includes('ya suscrito'))) {
          showSuccess('Ya estás suscrito');
        } else if (errBody && typeof errBody === 'object' && (errBody.details || errBody.message)) {
          showError(errBody.details || errBody.message || 'Error al suscribir');
        } else {
          throw new Error('Error al suscribir');
        }
      }
    } catch (error) {
      showError(
        error instanceof Error
          ? error.message
          : "Error de conexión. Por favor, intenta nuevamente."
      );
    } finally {
      submitButton.textContent = "Suscribirse";
      updateButtonState();
    }
  });
</script>
